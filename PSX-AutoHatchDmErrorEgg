getgenv().AutoHatchDmError = true      -- Auto Hatch Diamond Error Egg
getgenv().HatchType        = "Single"  -- Single or Triple or Octuple
getgenv().NoEggAnimation   = true      -- Deletes Egg Opening Animation
getgenv().UseEggsCounter   = true      -- Counter For The Number Of Hatches / Will Show On The Left Of Your Gems 
task.wait(5)                           -- Keep it if Your Using Auto Execute if no Delete it

if not game:IsLoaded() then
    repeat wait() until game:IsLoaded()
end

local GC = getconnections or get_signal_cons
if GC then
    for i,v in pairs(GC(game.Players.LocalPlayer.Idled)) do
        if v["Disable"] then
            v["Disable"](v)
        elseif v["Disconnect"] then
            v["Disconnect"](v)
        end
    end
else
    game:GetService("Players").LocalPlayer.Idled:Connect(
    function()
        game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
        wait(1)
        game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
    end)
    print("Trach Executor | Doesnt Support **getconnections** Function LOL")
end

local Blunder = require(game:GetService("ReplicatedStorage"):FindFirstChild("BlunderList", true))
local OldGet = Blunder.getAndClear
setreadonly(Blunder, false)
Blunder.getAndClear = function(...)
    local Packet = ...
    for i,v in next, Packet.list do
        if v.message ~= "PING" then
            table.remove(Packet.list, i)
       end
   end
   return OldGet(Packet)
end

if getgenv().UseEggsCounter ~= true then
    if game.CoreGui:FindFirstChild("FPSCounter") then
        game.CoreGui:FindFirstChild("FPSCounter"):Destroy()
    end
end

if getgenv().UseEggsCounter == true then
    local UI = game:GetObjects("rbxassetid://8524217009")[1]
    if game.CoreGui:FindFirstChild("FPSCounter") then
        game.CoreGui:FindFirstChild("FPSCounter"):Destroy()
    end
    UI.Parent = game.CoreGui
    UI.Main.Position = UDim2.new(0, 1211,0, 311)
    local UserInputService = game:GetService("UserInputService")
    local TweenService = game:GetService("TweenService")
    local DR = false
    UI.Main.BackgroundTransparency = 1
    UI.Main.Title.TextTransparency = 0.7
    local transitionInfo = TweenInfo.new(0.8, Enum.EasingStyle.Back)
    local tween = TweenService:Create(UI.Main, transitionInfo, {BackgroundTransparency = 0.6})
    tween:Play()
    local transitionInfo = TweenInfo.new(0.8, Enum.EasingStyle.Back)
    local tween = TweenService:Create(UI.Main.Title, transitionInfo, {TextTransparency = 0.4})
    tween:Play()
    local function MakeDraggable(objecttodragfrom, object)
        pcall(function()
            local dragging = false
            local dragInput, mousePos, framePos
            objecttodragfrom.InputBegan:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseButton1 then
                    dragging = true
                    DR = true
                    mousePos = input.Position
                    framePos = object.Position
                    input.Changed:Connect(function()
                        if input.UserInputState == Enum.UserInputState.End then
                            dragging = false
                        end
                    end)
                end
            end)
            objecttodragfrom.InputChanged:Connect(function(input)
                if input.UserInputType == Enum.UserInputType.MouseMovement then
                    dragInput = input
                end
            end)
            UserInputService.InputChanged:Connect(function(input)
                if input == dragInput and dragging then
                    local delta = input.Position - mousePos
                    local transitionInfo = TweenInfo.new(0.4, Enum.EasingStyle.Quint)
                    local tween = TweenService:Create(object, transitionInfo, {Position = UDim2.new(0, framePos.X.Offset + delta.X, 0, framePos.Y.Offset + delta.Y)})
                    tween:Play()
                    wait(0.1)
                end
            end)
        end)
    end
    MakeDraggable(UI.Main,UI.Main)
    UI.Main.MouseEnter:Connect(function()
        local transitionInfo = TweenInfo.new(0.8, Enum.EasingStyle.Quint)
        local tween = TweenService:Create(UI.Main, transitionInfo, {BackgroundTransparency = 0.4})
        tween:Play()
        local transitionInfo = TweenInfo.new(0.8, Enum.EasingStyle.Quint)
        local tween = TweenService:Create(UI.Main.Title, transitionInfo, {TextTransparency = 0.1})
        tween:Play()
    end)
    UI.Main.MouseLeave:Connect(function()
        local transitionInfo = TweenInfo.new(0.8, Enum.EasingStyle.Quint)
        local tween = TweenService:Create(UI.Main, transitionInfo, {BackgroundTransparency = 0.8})
        tween:Play()
        local transitionInfo = TweenInfo.new(0.8, Enum.EasingStyle.Quint)
        local tween = TweenService:Create(UI.Main.Title, transitionInfo, {TextTransparency = 0.4})
        tween:Play()
    end)
    local CounterLabel = UI.Main.Title
    local count = {"0"}
    function DiamondErrorEggCounter()
        x = lib.Save.Get(game.Players.LocalPlayer)
        local eggsopen = {}
        for i,v in pairs(x.EggsOpened) do
            if i == "Diamond Error Egg" then
                table.insert(eggsopen, v) end
            end
            if #eggsopen <= 0 then
                return count
            end 
        return eggsopen
    end
    function UpdateHatchedEggs()
        while getgenv().UseEggsCounter == true and task.wait() do
            for i,v in pairs(DiamondErrorEggCounter()) do
                CounterLabel.Text = "Eggs Opened: "..tostring(v)
            end
        end
    end
    game:GetService("RunService").Heartbeat:Connect(UpdateHatchedEggs)
end

local lib = require(game:GetService("ReplicatedStorage"):WaitForChild("Framework"):WaitForChild("Library"))
local EggAnimation = game.Players.LocalPlayer.PlayerScripts.Scripts.Game['Open Eggs']
local BackAnimation = getsenv(EggAnimation).OpenEgg
local Network = require(game:GetService("ReplicatedStorage").Library.Client.Network)
debug.setupvalue(Network.Invoke, 1, function() return true end)
InAprilFools = false

if getgenv().NoEggAnimation == true then
    getsenv(EggAnimation).OpenEgg = function() return end
else
    getsenv(EggAnimation).OpenEgg = BackAnimation
end

if lib.WorldCmds.Get() == "April Fools" then
    InAprilFools = true
else
    if syn then
        syn_context_set(2)
    else
        setthreadcontext(2)
    end
    lib.WorldCmds.Load("April Fools")
    if syn then
        syn_context_set(1)
    else
        setthreadcontext(1)
    end
    wait(3)
    InAprilFools = true
end

if getgenv().AutoHatchDmError == true and InAprilFools == true then
    --game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame  = game:GetService("Workspace").__MAP.Interactive["April Fools Secret"].Interact.CFrame * CFrame.new(0,1,0)
    game:GetService('Players').LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-1414.6854248046875, 344.31390380859375, -672.635498046875)
    wait(0.1)
    game.Players:Chat("pls open")
    game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("pls open", "All")
    wait(2)
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame  = game:GetService("Workspace").__MAP.Eggs["April Fools Secret Eggs"].PLATFORM.SectionName.CFrame * CFrame.new(0,1,0)
    while getgenv().AutoHatchDmError == true and task.wait() do
        if getgenv().AutoHatchDmError == true and getgenv().HatchType == 'Single' then
            local args = {
                [1] = "Diamond Error Egg",
                [2] = false,
                [3] = false
            }
            Network.Invoke("Buy Egg", unpack(args))
        elseif getgenv().AutoHatchDmError == true and getgenv().HatchType == 'Triple' then
            local args = {
                [1] = "Diamond Error Egg",
                [2] = true,
                [3] = false
            }
            Network.Invoke("Buy Egg", unpack(args))
        elseif getgenv().AutoHatchDmError == true and getgenv().HatchType == 'Octuple' then
            local args = {
                [1] = "Diamond Error Egg",
                [2] = false,
                [3] = true
            }
            Network.Invoke("Buy Egg", unpack(args))
        end
    end
end
